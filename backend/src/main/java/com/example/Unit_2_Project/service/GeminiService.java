package com.example.Unit_2_Project.service;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class GeminiService {

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(GeminiService.class);


    private final Client client;

    /**
     * Spring will inject your API key from application.properties
     * (e.g. google.genai.api-key=YOUR_KEY)
     */
    public GeminiService(@Value("${google.genai.api-key}") String apiKey) {
        this.client = Client.builder()
                .apiKey(apiKey)
                .build();
        if (apiKey != null && !apiKey.isBlank()) {
            log.info("Google GenAI API key successfully loaded (length: {})", apiKey.length());
        } else {
            log.warn("Google GenAI API key is missing or blank!");
        }
    }

    // Sends the given question (and optional context) to Gemini and returns its explanation.
    /**
     * Explains a quiz question using Google Gemini.
     *
     * @param question The quiz question to explain.
     * @param context  Optional context to provide additional information.
     * @return The explanation generated by Gemini.
     */
    public String explainQuestion(String question, String context) {
        // 1) Build a clear, tutoring-style prompt:
        StringBuilder prompt = new StringBuilder()
                .append("You are an expert tutor. Explain this quiz question in clear, simple terms:\n\n")
                .append("Question: ").append(question).append("\n");

        if (context != null && !context.isBlank()) {
            prompt.append("Context: ").append(context).append("\n");
        }

        // 2) Call Gemini. Passing 'null' here means “use defaults”
        GenerateContentResponse response = client
                .models
                .generateContent(
                        "gemini-2.0-flash-001",
                        prompt.toString(),
                        null
                );

        // 3) Return the generated text
        return response.text();
    }
}


